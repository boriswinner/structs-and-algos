#include <stdio.h>
#include <stdlib.h>
#include <stddef.h>
#define HASHSIZE 9369319

typedef struct listnode_ {
    int val;
    struct listnode_ *next;
} listnode;

typedef struct list_ {
    listnode *start;
} list;

void listadd(list* alist, int val){
    listnode *tmp = (listnode*)(malloc(sizeof(listnode)));
    tmp->val = val;
    tmp->next = alist->start;
    alist->start = tmp;
}

void listdelete(list* alist, int val){
    if (alist->start == NULL) return;
    if (alist->start->val == val) {
        alist->start = alist->start->next;
        return;
    }
    listnode* i = alist->start;
    listnode* prev = i;
    while (i != NULL) {
        if (i->val == val){
            prev->next = i->next;
        }
        prev = i;
        i = prev->next;
    }
}

void listfind(list* alist, int val){
    if (alist->start == NULL) return;
    listnode* i = alist->start;
    if (i->val == val) {
        alist->start = i->next;
        return;
    }
    listnode* prev = i;
    while (i != NULL) {
        if (i->val == val){
            prev->next = i->next;
        }
        prev = i;
        i = prev->next;
    }
}

typedef struct hashtable{
    list elem[HASHSIZE];
} hashtable;

int hashfunction(int key, int size){
    return(31 * key + 17) % size;
}

void htadd(hashtable* atable, int key, int val){
    int i = hashfunction(key, HASHSIZE);
    listadd(&(*atable).elem[i], val);
}

void htremove(hashtable* atable, int key){
    int i = hashfunction(key, HASHSIZE);
    listdelete(&(*atable).elem[i], key);
}

int htfind(hashtable* atable, int key){
    int i = hashfunction(key, HASHSIZE);

}

int main()
{
    return 0;
}
